export PATH=$PATH:/home/guozi/pkg/arm-2009q3/bin
Makefile使用前请将这句话先执行一遍，因为这个Ubuntu里有一个比较新的交叉编译器。
使用前要把这个旧的交叉编译器的路径放到环境变量里，如果想要永久使用，请更新/etc/profile文件
环境变量设置   vi /etc/profile   
在文件末端加上 export=$PATH:/usr/local/arm/arm-2009q3/bin  就可以了

imwheel 
一个已下载的小插件，用于加快鼠标滚轮速度，方便翻阅代码,在终端输入： imwheel

使用分支来对文件进行修改的流程：
git checkout -b guozi
[do your work]
git add ~
git commit ~
git merge guozi
git branch -D guozi

如何清空commit提交记录，保持git干净清洁&&代码完整
git checkout --orphan latest_branch
git add -A
git commit -am "commit message"
git branch -D master
git branch -m master
git push -f origin master
git checkout main
Ps：如果你的主分支是main，请将上述的三个master改为main（反对黑人歧视的bullshit！！！）


1、create a new repository on the command line 
这种情况是你从来都没有使用过git，当然这是不可能的
echo "# robot416" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/guozi-1997/robot416.git
git push -u origin main

2、 push an existing repository from the command line
git remote add origin https://github.com/guozi-1997/robot416.git
git branch -M main
git push -u origin main
一般执行2就可以了，当你执行完之后，以后只需要：
git push
git pull

git remote add <远程主机名> https://github.com/guozi-1997/robot416.git
git push <远程主机名> <本地分支名>:<远程分支名>
git push origin main:main
git push origin main:guozi
# origin为设置的远程仓库别名, master为本地分支名, djs为远程分支名

错误解决方案：GnuTLS recv error (-110): The TLS connection was non-properly terminated.
apt-get install gnutls-bin
git config --global http.sslVerify false
git config --global http.postBuffer 1048576000

2021年10月10日20:46:47
我们将point_get()和show_some()
函数进行了屏蔽，这两个函数用于显示屏显示汉字，
由于IDE的缘故出现了段错误。
解决办法：将本程序使用gb2312格式显示即可。
bug：使用2312会使程序的注释出现乱码，因此暂时屏蔽。期待师弟的解决！

2021年10月10日21:47:48
将陈阳师兄的路径规划和轨迹跟踪部分加入
包括对way.c部分
贝塞尔曲线等部分
的修改

2021年10月11日16:32:32
dlta_d = 100;
dlta_a = 0;
pthread_rwlock_rdlock(&rwlock);
frame_send.data[1] = (int)dlta_d >> 8;
frame_send.data[2] = (int)dlta_d;
frame_send.data[3] = (int)dlta_a >> 8;
frame_send.data[4] = (int)dlta_a;
frame_send.data[5] = 0;
nbytes = write(can_fd, &frame_send, sizeof(frame_send)); //通过CAN控制stm32电机，令机器人移动
pthread_rwlock_unlock(&rwlock);							 //解锁，如果其他的线程需要对速度进行改变，则需要锁
上述是修改v和w的方式，不局限于主线程。可在任何线程中直接使用

2021年11月01日16:49:04
我们将评估函数从min_dir()中分离出来独立编写，提高了代码的可用性，可更改性。
评估函数：goalList()；

//====系统平台中的一些说明======//
//===实际控制，线速度单位mm/s，角速度单位1/10°/s==//
//===dlta_d>0为前进，get_y<0,    dlta_d<0为后退，get_y>0    ======//
//===dlta_a>0时候左转get_x>0，get_thta由0->-1800->1800->0  ======//
//===dlta_a<0时候右转get_x<0，get_thta由0->1800->-1800->0  ======//
get_x表示机器人朝向为x的方向，行进的距离
get_y表示机器人右侧为y正向偏移的距离，这一点要弄清楚
get_tht右转为正
当你完全看懂别人写的其中一段代码的时候，你就有足够的勇气对其中的内容进行修改！

向右转电子罗盘加，向左电子罗盘减
陀螺仪向左转是加，向右转陀螺仪减
中断线程不要使用ctrl + z，会导致段错误。使用ctrl + c来中断程序
PS:在头文件中的变量不要进行初始化赋值！否则编译的时候会出现错误
way.c1329行的i值好像有点问题

  这里给出的软件开发应遵循的一般原则，摘自Les Piegl和Wayne Tiller所著的一本非常经典的书The NURBS Book(Second Edition)。
  (1)工具性(toolability):应该使用可用的工具来建立新的应用程序；
  (2)可移植性(portability):应用程序应该容易被移植到不同的软件和硬件平台；
  (3)可重用性(reusability):程序的编写应该便于重复使用代码段；
  (4)可检验性(testability):程序应该简单一致，以便于测试和调试；
  (5)可靠性(reliability):对程序运行过程中可能出现的各种错误应该进行合理、一致的处理，以使系统稳定、可靠；
  (6)可扩展性(enhanceability):代码必须易于理解，以便可以容易地增加新的功能；
  (7)可维护性(fixability):易于找出程序错误的位置；
  (8)一致性(consistency):在整个库中，编程习惯应保持一致；
  (9)可读性(communicability):程序应该易于阅读和理解;
  (10)编程风格(style of programming):代码看起来像书上的数学公式那样以便于读者理解，同时遵循用户友好的编程风格;
  (11)易用性(usability):应该使一些非专业的用户也能够方便地使用所开发的库来开发各种更高层次的应用程序;
  (12)数值高效性(numerical efficiency):所有函数必须仔细推敲，保证其数值高效性;
  (13)基于对象编程(object based programming):避免在函数间传递大量数据，并且使代码易于理解。

2021年11月03日08:29:37
在周围环境有磁场干扰的情况下，为了避开电子罗盘数据不稳定的情况，我们暂时将电子罗盘抛弃
拟使用下面的假设：
假设一：假定机器人初始角度都是一样的，他们的朝向都是一致的。（即使不能保证完全一致，只要保证大致方向一致即可）
可评估的代行方案：可以使用陀螺仪配合get_tht进行数据融合（卡尔曼滤波）。
目前这一方案在2021年11月19日09:36:05已经完成
缺点：仍然要保持初始角度一致,在使用一段时间之后需要对陀螺仪进行矫正。
PS：没有完美的解决方案

2021年11月19日10:09:08
机器人之间的数据传输由原来的字符串传输修改为传输一个结构体。
这一部分代码已经完成，由程瑞嘉完成。
int rgb(unsigned char *addr, int y, int x)
这一部分代码有一点小小的变动。具体修复方案需要做图像的同学去解决。

2021年11月17日11:02:44
陀螺仪型号：ML7600
1、如果使用不同的代码去控制不同的机器人，如何同步相同部分的代码？
2、陀螺仪时间长了数值也会飘，如何每隔一段时间就对陀螺仪的值进行修正？
这里有一个参考：可以利用机器人之间的角度和是180度进行修正。
//printf("%d\n", __LINE__);